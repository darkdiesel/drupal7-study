<?php
/**
 * @file
 * Module to associate icons with menu items
 */

/**
 * Implements hook_menu().
 */
function custom_menu_icons_menu() {
  $items['admin/config/user-interface/custom_menu_icons'] = [
    'title' => 'Custom Menu Icons settings',
    'description' => 'Change menu icons',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['custom_menu_icons_admin_settings'],
    'access arguments' => ['administer site configuration'],
    'type' => MENU_NORMAL_ITEM,
    'file' => 'custom_menu_icons.admin.inc',
  ];
  return $items;
}

/**
 * Implements hook_theme_registry_alter()
 *   Override the nodehierarchy child links function.
 *
 * @param $theme_registry
 */
function custom_menu_icons_theme_registry_alter(&$theme_registry) {
  // Override the link theming functions to hide titles if so configured.
    if (!empty($theme_registry['menu_tree'])) {
      $theme_registry['menu_tree']['function'] = 'custom_menu_icon_menu_tree';
    }
    if (!empty($theme_registry['menu_link'])) {
      $theme_registry['menu_link']['function'] = 'custom_menu_icon_menu_link';
    }
    if (!empty($theme_registry['link'])) {
      $theme_registry['link']['function'] = 'custom_menu_icon_link';
    }
}

/**
 * Implements hook_form_alter().
 */
function custom_menu_icons_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'menu_edit_item' && (isset($form_state['build_info']['args'][1]['menu_name']) || isset($form_state['build_info']['args'][2]['menu_name']) ) ) {
    $menus = variable_get('custom_menu_icons_menus', 0);

    if (isset($menus) && ((isset($form_state['build_info']['args'][1]['menu_name']) && $menus[$form_state['build_info']['args'][1]['menu_name']] !== 0) || (isset($form_state['build_info']['args'][2]['menu_name']) && $menus[$form_state['build_info']['args'][2]['menu_name']] !== 0))) {
      if (isset($form['mlid']['#value'])) {
        $options = unserialize(db_query('SELECT options FROM {menu_links} WHERE mlid = :mlid', array(':mlid' => $form['mlid']['#value']))->fetchField());
      }

      if (!isset($options) || !isset($options['custom_menu_icon'])) {
        $options = [
          'custom_menu_icon' => [
            'enable' => NULL,
            'type' => NULL,
            'icon' => NULL,
            'image' => NULL,
            'image_style' => NULL,
            'path' => NULL,
          ],
        ];
      }

      $form['custom_icon'] = [
        '#type' => 'fieldset',
        '#title' => t('Link icon settings'),
      ];

      $form['custom_icon']['cmi_use_custom_icon_logo'] = array(
        '#type' => 'checkbox',
        '#title' => t('Use an icon'),
        '#default_value' => $options['custom_menu_icon']['enable'],
        '#tree' => FALSE,
        '#description' => t('Check this if you want this icon to be used.'),
      );

      $form['custom_icon']['cmi_type'] = [
        '#type' => 'radios',
        '#title' => t('Icon Type'),
        '#description' => t('Select icon type for menu uploaded image or icon from list.'),
        '#options' => [
          t('None'),
          t('Icon'),
          t('Image'),
        ],
        '#default_value' => $options['custom_menu_icon']['type'],
      ];
      $form['custom_icon']['cmi_type']['#states'] = array(
        'visible' => array (
          ':input[name="cmi_use_custom_icon_logo"]' => array('checked' => TRUE),
        ),
      );

      $icons = custom_menu_icons_icons_list();

      $form['custom_icon']['cmi_icon'] = [
        '#type' => 'select',
        '#title' => t('Icon'),
        '#description' => t("Select icon from list. You can setup it's in <a href='/admin/config/user-interface/custom_menu_icons'>here</a>"),
        '#options' => $icons,
        '#empty_option' => t('None'),
        '#default_value' => $options['custom_menu_icon']['icon'],
      ];
      $form['custom_icon']['cmi_icon']['#states'] = array(
        'visible' => array (
          ':input[name="cmi_use_custom_icon_logo"]' => array('checked' => TRUE),
        ),
      );

      $form['custom_icon']['cmi_image'] = [
        '#type' => 'file',
        '#title' => t('Image'),
        '#maxlength' => 40,
        '#description' => t("Upload icon as image. Allowed extensions: gif png jpg jpeg"),
        '#upload_validators' => [
          'file_validate_extensions' => ['gif png jpg jpeg'],
          // Pass the maximum file size in bytes
          //'file_validate_size' => array(MAX_FILE_SIZE*1024*1024),
        ],
      ];
      $form['custom_icon']['cmi_image']['#states'] = array(
        'visible' => array (
          ':input[name="cmi_use_custom_icon_logo"]' => array('checked' => TRUE),
        ),
      );

      $form['custom_icon']['cmi_image_style'] = array(
        '#title' => t('Image style'),
        '#type' => 'select',
        '#options' => image_style_options(FALSE),
        '#empty_option' => '<' . t('Menu Icons default') . '>',
        '#default_value' => $options['custom_menu_icon']['image_style'],
        '#description' => t('The preview image will be shown while editing the content.'),
        '#required' => FALSE,
      );
      $form['custom_icon']['cmi_image_style']['#states'] = array(
        'visible' => array (
          ':input[name="cmi_use_custom_icon_logo"]' => array('checked' => TRUE),
        ),
      );

      $form['custom_icon']['cmi_icon_path'] = array(
        '#type' => 'textfield',
        '#title' => t('Path to the icon'),
        '#default_value' => (isset($options['custom_menu_icon']['path']) ? $options['custom_menu_icon']['path'] : variable_get('custom_menu_icons_default_icon', drupal_get_path('module', 'custom_menu_icons') . '/images/default_icon.png')),
        '#description' => t('The path to the image you would like to use as a background image for this menu item.'),
      );
      $form['custom_icon']['cmi_icon_path']['#states'] = array(
        'visible' => array (
          ':input[name="cmi_use_custom_icon_logo"]' => array('checked' => TRUE),
        ),
      );

      $form['#submit'][] = 'custom_menu_icons_form_alter_menu_link_submit';
    }
  }
}

/**
 * Implements hook_form_FORMID_alter().
 */
function custom_menu_icons_form_node_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['menu'])) {
    if (isset($form['mlid']['#value'])) {
      $options = unserialize(db_query('SELECT options FROM {menu_links} WHERE mlid = :mlid', array(':mlid' => $form['mlid']['#value']))->fetchField());
    }

    if (!isset($options) || !isset($options['custom_menu_icon'])) {
      $options = [
        'custom_menu_icon' => [
          'enable' => NULL,
          'type' => NULL,
          'icon' => NULL,
          'image' => NULL,
          'image_style' => NULL,
          'path' => NULL,
        ],
      ];
    }

    $form['menu']['custom_icon'] = array(
      '#type' => 'fieldset',
      '#weight' => 5,
      '#title' => t('Custom Menu icon settings'),
      '#description' => t('If checked, the following icon will be used as background image for this menu item.'),
      '#collapsible' => TRUE,
      '#collapsed' => !$options['custom_menu_icon']['enable'],
      '#states' => array(
        'invisible' => array(
          ':input[name="menu[enabled]"]' => array('checked' => FALSE),
        ),
      ),
    );

    $form['menu']['custom_icon']['cmi_use_custom_icon_logo'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use an icon'),
      '#default_value' => $options['custom_menu_icon']['enable'],
      '#tree' => FALSE,
      '#description' => t('Check this if you want this icon to be used.'),
    );

    $form['menu']['custom_icon']['cmi_type'] = [
      '#type' => 'radios',
      '#title' => t('Icon Type'),
      '#description' => t('Select icon type for menu uploaded image or icon from list.'),
      '#options' => [
        t('None'),
        t('Icon'),
        t('Image'),
      ],
      '#default_value' => (isset($options['custom_menu_icon']['type']) ? $options['custom_menu_icon']['type'] : 0),
    ];
    $form['menu']['custom_icon']['cmi_type']['#states'] = array(
      'visible' => array (
        ':input[name="cmi_use_custom_icon_logo"]' => array('checked' => TRUE),
      ),
    );

    $icons = custom_menu_icons_icons_list();

    $form['menu']['custom_icon']['cmi_icon'] = [
      '#type' => 'select',
      '#title' => t('Icon'),
      '#description' => t("Select icon from list. You can setup it's in <a href='/admin/config/user-interface/custom_menu_icons'>here</a>"),
      '#options' => $icons,
      '#empty_option' => t('None'),
      '#default_value' => $options['custom_menu_icon']['icon'],
    ];
    $form['menu']['custom_icon']['cmi_icon']['#states'] = array(
      'visible' => array (
        ':input[name="cmi_use_custom_icon_logo"]' => array('checked' => TRUE),
      ),
    );

    $form['menu']['custom_icon']['cmi_image'] = [
      '#type' => 'file',
      '#title' => t('Image'),
      '#maxlength' => 40,
      '#description' => t("Upload icon as image. Allowed extensions: gif png jpg jpeg"),
      '#upload_validators' => [
        'file_validate_extensions' => ['gif png jpg jpeg'],
        // Pass the maximum file size in bytes
        //'file_validate_size' => array(MAX_FILE_SIZE*1024*1024),
      ],
    ];
    $form['menu']['custom_icon']['cmi_image']['#states'] = array(
      'visible' => array (
        ':input[name="cmi_use_custom_icon_logo"]' => array('checked' => TRUE),
      ),
    );

    $form['menu']['custom_icon']['cmi_image_style'] = array(
      '#title' => t('Image style'),
      '#type' => 'select',
      '#options' => image_style_options(FALSE),
      '#empty_option' => '<' . t('Menu Icons default') . '>',
      '#default_value' => $options['custom_menu_icon']['image_style'],
      '#description' => t('The preview image will be shown while editing the content.'),
      '#required' => FALSE,
    );
    $form['menu']['custom_icon']['cmi_image_style']['#states'] = array(
      'visible' => array (
        ':input[name="cmi_use_custom_icon_logo"]' => array('checked' => TRUE),
      ),
    );

    $form['menu']['custom_icon']['cmi_icon_path'] = array(
      '#type' => 'textfield',
      '#title' => t('Path to the icon'),
      '#default_value' => (isset($options['custom_menu_icon']['path']) ? $options['custom_menu_icon']['path'] : variable_get('custom_menu_icons_default_icon', drupal_get_path('module', 'custom_menu_icons') . '/images/default_icon.png')),
      '#description' => t('The path to the image you would like to use as a background image for this menu item.'),
    );
    $form['menu']['custom_icon']['cmi_icon_path']['#states'] = array(
      'visible' => array (
        ':input[name="cmi_use_custom_icon_logo"]' => array('checked' => TRUE),
      ),
    );

    $form['#attributes']['enctype'] = 'multipart/form-data';
    $form['#submit'][] = 'custom_menu_icons_node_form_submit';
  }
}

function custom_menu_icons_form_alter_menu_link_submit($form, $form_state) {
  // Check the destination folder, attempt to create it if it does't exist
  $directory_path = custom_menu_icons_directory_path();
  file_prepare_directory($directory_path, FILE_CREATE_DIRECTORY);

  // Store the current icon path
  $path = $form_state['values']['cmi_icon_path'];

  // Define the validation settings
  $validate = [
    'file_validate_is_image' => [],
  ];

  if ($file = file_save_upload('cmi_image', $validate)) {
    $parts = pathinfo($file->filename);
    $filename = $directory_path . '/menu_icon_' . $form_state['values']['mlid'] . '.' . $parts['extension'];
    file_unmanaged_copy($file->uri, $filename, FILE_EXISTS_REPLACE);

    // Flush image style generated images
    image_path_flush($filename);

    $path = $filename;
  }

  $options = unserialize(db_query('SELECT options FROM {menu_links} WHERE mlid = :mlid', array(':mlid' => $form_state['values']['mlid']))->fetchField());
  $options['custom_menu_icon'] = array(
    'enable' => $form_state['values']['cmi_use_custom_icon_logo'],
    'path' => $path,
    'image_style' => $form_state['values']['cmi_image_style'],
    'type' => $form_state['values']['cmi_type'],
    'icon' => $form_state['values']['cmi_icon'],
  );

  // Use default image style if not explicitly set.
  if (empty($options['custom_menu_icon']['image_style'])) {
    $options['custom_menu_icon']['image_style'] = variable_get('custom_menu_icons_image_style_default', 'custom_menu_icon');
  }

  if (!isset($options['attributes'])) {
    $options['attributes'] = array();
  }
  if (!isset($options['attributes']['class'])) {
    $options['attributes']['class'] = array();
  }

  $classes = array();
  $classes[] = "custom_menu_icon";
  $classes[] = "menu-" . $form_state['values']['mlid'];
  if ($options['custom_menu_icon']['enable'] && !empty($options['custom_menu_icon']['path']) && file_exists($options['custom_menu_icon']['path'])) {
    foreach ($classes as $class) {
      if (!in_array($class, $options['attributes']['class'])) {
        $options['attributes']['class'][] = $class;
      }
    }
  }

  if (empty($options['attributes']['class'])) {
    unset($options['attributes']['class']);
  }

  db_update('menu_links')
    ->fields(array(
      'options' => serialize($options),
    ))
    ->condition('mlid', $form_state['values']['mlid'])
    ->execute();
}

/**
 * Implements hook_node_insert().
 */
function custom_menu_icons_node_insert($node) {
  custom_menu_icons_node_save($node);
}

/**
 * Implements hook_node_update().
 */
function custom_menu_icons_node_update($node) {
  custom_menu_icons_node_save($node);
}

/**
 * Helper for hook_node_insert() and hook_node_update().
 */
function custom_menu_icons_node_save($node) {
  if (isset($node->menu['custom_icon']) && $node->menu['custom_icon']['enable']) {
    // Check the destination folder, attempt to create it if it does't exist
    $directory_path = custom_menu_icons_directory_path();
    file_prepare_directory($directory_path, FILE_CREATE_DIRECTORY);

    // Take the current icon path
    $path = $node->menu['custom_icon']['path'];
    $file = FALSE;

    if (!empty($path)) {
      $file = image_load($path);
    }

    if ($file) {
      // Move temporary file to it's destination.
      $parts = pathinfo($file->source);
      $new_path = $directory_path . '/menu_icon_' . $node->menu['mlid'] . '.' . $parts['extension'];
      $node->menu['custom_icon']['path'] = $new_path;

      if ($new_path != $path) {
        $new_file = file_unmanaged_copy($path, $new_path, FILE_EXISTS_REPLACE);
        // Delete temporary file.
        file_unmanaged_delete($path);
      }


    }

    // Get link options from db.
    $options = unserialize(db_query('SELECT options FROM {menu_links} WHERE mlid = :mlid', array(':mlid' => $node->menu['mlid']))->fetchField());

    if (!isset($options['attributes'])) {
      $options['attributes'] = array();
    }
    if (!isset($options['attributes']['class'])) {
      $options['attributes']['class'] = array();
    }
    $classes = array();
    $classes[] = "menu_icon";
    $classes[] = "menu-" . $node->menu['mlid'];

    // Add our menu icon info to the options array
    $options['custom_menu_icon'] = array(
      'enable' => $node->menu['custom_icon']['enable'],
      'path' => $node->menu['custom_icon']['path'],
      'image_style' => $node->menu['custom_icon']['image_style'],
      'type' => $node->menu['custom_icon']['type'],
      'icon' => $node->menu['custom_icon']['icon'],
    );
    // Add new classes
    foreach ($classes as $class) {
      if (!in_array($class, $options['attributes']['class'])) {
        $options['attributes']['class'][] = $class;
      }
    }

    if (empty($options['attributes']['class'])) {
      unset($options['attributes']['class']);
    }
    // Update the link options
    db_update('menu_links')
      ->fields(array(
        'options' => serialize($options),
      ))
      ->condition('mlid', $node->menu['mlid'])
      ->execute();

    // @TODO The icon is not shown on first page load. We need to find a solution for this. Meanwhile:
    drupal_set_message(t('A new menu icon has been set for this node. Please refresh the page to view it.'));
  }
}

/**
 *
 */
function custom_menu_icons_node_form_submit($form, &$form_state) {
  // Check the destination folder, attempt to create it if it does't exist
  $directory_path = custom_menu_icons_directory_path();
  file_prepare_directory($directory_path, FILE_CREATE_DIRECTORY);

  // Store the current icon path
  $path = $form_state['values']['menu']['custom_icon']['cmi_icon_path'];

  // Define the validation settings
  $validate = array(
    'file_validate_is_image' => array(),
  );

  // Check for a new uploaded icon, and use that instead.
  if ($file = file_save_upload('menu', $validate)) {
    $parts = pathinfo($file->filename);
    $filename = $directory_path . '/menu_icon_temp_' . time() . '.' . $parts['extension'];
    file_unmanaged_copy($file->uri, $filename, FILE_EXISTS_REPLACE);
    // Flush image style generated images
    image_path_flush($filename);
    $path = $filename;
  }

  $options = array();
  $options['custom_menu_icon'] = array(
    'enable' => $form_state['values']['cmi_use_custom_icon_logo'],
    'path' => $path,
    'image_style' => $form_state['values']['menu']['custom_icon']['cmi_image_style'],
    'type' => $form_state['values']['menu']['custom_icon']['cmi_type'],
    'icon' => $form_state['values']['menu']['custom_icon']['cmi_icon'],
  );
  // Use default image style if not explicitly set.
  if (empty($options['custom_menu_icon']['image_style'])) {
    $options['custom_menu_icon']['image_style'] = variable_get('custom_menu_icons_image_style_default', 'custom_menu_icon');
  }

  $form_state['values']['menu']['custom_icon'] = $options['custom_menu_icon'];
}

/**
 * Implements hook_image_default_styles().
 * Define the default menu_icons image style.
 */
function custom_menu_icons_image_default_styles() {
  $styles = array();

  $styles['custom_menu_icon'] = array(
    'effects' => array(
      array(
        'name' => 'image_scale',
        'data' => array('width' => 45, 'height' => 45, 'upscale' => 1),
        'weight' => 0,
      ),
    )
  );

  return $styles;
}

/**
 * Implements hook_theme().
 */
function custom_menu_icons_theme() {
  return array(
    'custom_menu_icons_item' => array(
      'variables' => array('mlid' => NULL, 'path' => NULL, 'size' => NULL, 'height' => NULL, 'pos' => NULL, 'source' => NULL),
      'template' => 'custom_menu_icons_css_item',
    ),
  );
}

/**
 * Implements hook_menu_breadcrumb_alter()
 * Prevent menu icons from being displayed next to breadcrumbs.
 *
 * @param $active_trail
 * @param $item
 */
function custom_menu_icons_menu_breadcrumb_alter(&$active_trail, $item) {
  foreach ($active_trail as &$crumb) {
    // Check if this is an item with a menu icon.
    if (array_key_exists('mlid', $crumb) && isset($crumb['localized_options']['attributes']['class'])) {
      $mlid = $crumb['mlid'];
      $count = count($crumb['localized_options']['attributes']['class']);
      for ($i = 0; $i < $count; $i++) {
        $class = $crumb['localized_options']['attributes']['class'][$i];
        // If this is a menu_icon class, remove it.
        switch ($class) {
          case 'menu_icon':
          case 'menu-' . $mlid:
            unset($crumb['localized_options']['attributes']['class'][$i]);
            break;
        }
      }
    }
  }
}

/**
 * Returns the file directory path in which both the CSS file and the icons are stored.
 */
function custom_menu_icons_directory_path($full = TRUE) {
  $path = variable_get('custom_menu_icons_image_folder', 'custom_menu_icons');
  $path_full = 'public://' . $path;
  return ($full ? $path_full : $path);
}

function custom_menu_icons_icons_list(){
  $icons = variable_get('custom_menu_icons_icons', []);

  $icons = explode("\r\n", $icons);
  $menu_icons = [];

  foreach ($icons as $icon) {
    $ex_icon = explode("|", $icon);
    if (is_array($ex_icon) && count($ex_icon) > 1) {
      $menu_icons[$ex_icon[0]] = $ex_icon[1];
    } elseif (count($ex_icon) == 1){
      $menu_icons[$ex_icon[0]] = $ex_icon[0];
    }
  }

  return $menu_icons;
}

/**
 * Override theme_menu_tree - hide link titles if enabled.
 *
 * @param $variables
 *
 * @return string
 */
function custom_menu_icon_menu_tree($variables) {
  if (isset($variables['#tree']['#theme_wrappers'][1]) && $variables['#tree']['#theme_wrappers'][1] == 'block') {
    return '<ul class="menu">' . $variables['tree'] . '</ul>';
  } else {
    return '<ul class="menu sub-menu">' . $variables['tree'] . '</ul>';
  }

}

/**
 * Override theme_menu_link - hide link titles if enabled.
 *
 * @param $variables
 *
 * @return string
 */
function custom_menu_icon_menu_link($variables) {
  $element = $variables['element'];
  $sub_menu = '';

  if ($element['#below']) {
    $sub_menu = drupal_render($element['#below']);
  }
  $output = l($element['#title'], $element['#href'], $element['#localized_options']);
  if (isset($element['#localized_options']['custom_menu_icon'])) {
    if ($element['#localized_options']['custom_menu_icon']['enable'] == 1 && $element['#localized_options']['custom_menu_icon']['type'] != 0) {
      $element['#attributes']['class'][] = 'intro';
      $element['#attributes']['class'][] = 'custom-menu-icon-type-'.$element['#localized_options']['custom_menu_icon']['type'];
      $element['#attributes']['title'] = $element['#title'];
      $output = l($element['#title'], $element['#href'], $element['#localized_options']);
    }
  }

  $element['#attributes']['class'][] = 'menu__item';

  return '<li' . drupal_attributes( $element['#attributes']) . '>' . $output . $sub_menu . "</li>\n";
}

/**
 * Override theme_link - hide link titles if enabled.
 *
 * @param $variables
 *
 * @return string
 */
function custom_menu_icon_link($variables) {
  if (isset($variables['options']['custom_menu_icon'])) {
    if ($variables['options']['custom_menu_icon']['enable'] == 1 || $variables['options']['custom_menu_icon']['type'] != 0) {
      $variables['options']['attributes']['title'] = $variables['text'];
      $link = '<a href="' . check_plain(url($variables['path'], $variables['options'])) . '"' . drupal_attributes($variables['options']['attributes']) . '>';

      switch ($variables['options']['custom_menu_icon']['type']) {
        case '1':
          if ($variables['options']['custom_menu_icon']['icon']){
            $icons = custom_menu_icons_icons_list();

            $link .= '<span class="icon">'.$icons[$variables['options']['custom_menu_icon']['icon']].'</span>';
            $link .= $variables['text'];
          }
          break;
        case '2':
          $link .= '<span class="icon">';
          $link .= theme('image_style',array('style_name' => $variables['options']['custom_menu_icon']['image_style'], 'path' => $variables['options']['custom_menu_icon']['path']));
          $link .= '</span>';
          $link .= $variables['text'];

          break;
        default:
          $link .= $variables['text'];
          break;
      }

      $link .= '</a>';
      return$link;
    }
  }
  return '<a href="' . check_plain(url($variables['path'], $variables['options'])) . '"' . drupal_attributes($variables['options']['attributes']) . '>' . ($variables['options']['html'] ? $variables['text'] : check_plain($variables['text'])) . '</a>';
}
